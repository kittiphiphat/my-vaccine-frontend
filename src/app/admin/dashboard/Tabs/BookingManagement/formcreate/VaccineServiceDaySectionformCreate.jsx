'use client';

import { useEffect, useState } from 'react';
import Select from 'react-select';
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';

const MySwal = withReactContent(Swal);

export default function VaccineServiceDayFormCreate({ onSave, onCancel }) {
  const [selectedDays, setSelectedDays] = useState([]);
  const [selectedVaccine, setSelectedVaccine] = useState(null);
  const [vaccines, setVaccines] = useState([]);

  const dayOptions = [
    { value: 0, label: '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå' },
    { value: 1, label: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå' },
    { value: 2, label: '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£' },
    { value: 3, label: '‡∏û‡∏∏‡∏ò' },
    { value: 4, label: '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ' },
    { value: 5, label: '‡∏®‡∏∏‡∏Å‡∏£‡πå' },
    { value: 6, label: '‡πÄ‡∏™‡∏≤‡∏£‡πå' },
  ];

  useEffect(() => {
    fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/api/vaccines?pagination[limit]=-1`)
      .then((res) => res.json())
      .then((data) => {
        const options = (data.data || []).map((vaccine) => ({
          value: vaccine.id,
          label: vaccine.attributes?.title || `‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô ID: ${vaccine.id}`,
        }));
        setVaccines(options);
      })
      .catch((err) => {
        console.error('Error fetching vaccines:', err);
        MySwal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'error');
      });
  }, []);

  const handleDaysChange = (selected) => {
    setSelectedDays(selected || []);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (selectedDays.length === 0) {
      await MySwal.fire('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ß‡∏±‡∏ô', 'warning');
      return;
    }

    if (!selectedVaccine) {
      await MySwal.fire('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô', 'warning');
      return;
    }

    const confirm = await MySwal.fire({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£?',
      text: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });

    if (!confirm.isConfirmed) return;

    const payload = {
      data: {
        day_of_week: selectedDays.map((d) => d.value),
        vaccine: selectedVaccine.value,
      },
    };

    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/api/vaccine-service-days`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(payload),
      });

      if (!res.ok) throw new Error('Create failed');
      await MySwal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
      onSave();
    } catch (err) {
      console.error('Error creating service day:', err);
      await MySwal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ', 'error');
    }
  };

  return (
    <div className="space-y-4 max-w-xl">
      <h2 className="text-xl font-semibold text-[#30266D]">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</h2>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (multi select) */}
        <div>
          <label className="block font-medium mb-2 text-[#30266D]">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</label>
          <Select
            options={dayOptions}
            isMulti
            value={selectedDays}
            onChange={handleDaysChange}
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô..."
            noOptionsMessage={() => '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}
            styles={selectStyles}
          />
        </div>

        {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô */}
        <div>
          <label className="block font-medium mb-2 text-[#30266D]">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô</label>
          <Select
            options={vaccines}
            value={selectedVaccine}
            onChange={setSelectedVaccine}
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô..."
            noOptionsMessage={() => '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô'}
            styles={selectStyles}
          />
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° */}
        <div className="flex justify-end space-x-2">
          <button
            type="button"
            onClick={onCancel}
            className="bg-[#F9669D] text-white px-4 py-2 rounded-md"
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>

          <button
            type="submit"
            className="bg-[#30266D] text-white px-4 py-2 rounded-md"
          >
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>
      </form>
    </div>
  );
}

// üé® ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á react-select
const selectStyles = {
  control: (base) => ({
    ...base,
    backgroundColor: '#30266D',
    borderColor: '#30266D',
    boxShadow: 'none',
    color: 'white',
  }),
  menu: (base) => ({
    ...base,
    backgroundColor: '#30266D',
    color: 'white',
  }),
  option: (base, state) => ({
    ...base,
    backgroundColor: state.isFocused ? '#F9669D' : '#30266D',
    color: 'white',
    cursor: 'pointer',
  }),
  multiValue: (base) => ({
    ...base,
    backgroundColor: '#F9669D',
    color: 'white',
  }),
  multiValueLabel: (base) => ({
    ...base,
    color: 'white',
  }),
  multiValueRemove: (base) => ({
    ...base,
    color: 'white',
    ':hover': {
      backgroundColor: '#221c59',
      color: 'white',
    },
    cursor: 'pointer',
  }),
  placeholder: (base) => ({
    ...base,
    color: '#ccc',
  }),
  singleValue: (base) => ({
    ...base,
    color: 'white',
  }),
};
